{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\React-Lessons-Section10-Using-useEffect-useReducer-and-useContext\\\\src\\\\components\\\\Login\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\n// State management helper function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emailValidator = /^\\S+@\\S+\\.\\S+$/gi; // email validator regex\n\nconst formReducer = (state, action) => {\n  let newState;\n  if (action.mode === \"email\") {\n    if (action.type === \"EMAIL_INPUT\") {\n      return newState = {\n        ...newState,\n        emailValue: action.val,\n        isValid: emailValidator.test(action.val)\n      };\n    }\n    if (action.type === \"EMAIL_BLUR\") {\n      return newState = {\n        ...newState\n      };\n    }\n  }\n  if (action.mode === \"password\" && emailValidator.test(action.val)) {\n    if (action.type === \"PASSWORD_INPUT\") {\n      return newState = {\n        ...newState,\n        passwordValue: action.val.trim(),\n        isValid: action.val.trim().length > 6\n      };\n    }\n    if (action.type === \"PASSWORD_BLUR\") {\n      return newState = {\n        ...newState\n      };\n    }\n  }\n  return newState = {\n    isValid: true\n  };\n};\nconst Login = props => {\n  _s();\n  /*\r\n    // \r\n      Using Destructuring to pulling out isValid properties from emailState and passwordState object and storing them into emailIsValid and passIsValid constants \r\n      using alias assignment, and use it as dependencies and values to useEffect below to ensure it dont fires futher if form is already valid\r\n    //\r\n    const { isValid: emailIsValid } = emailState;\r\n    const { isValid: passwordIsValid } = passwordState;\r\n    useEffect(() => {\r\n      const identifier = setTimeout(() => {\r\n        console.log(\"Checking input valididity...\");\r\n        setFormIsValid(emailIsValid && passwordIsValid);\r\n      }, 500);\r\n        // This is called as Clean Up (Debouncing method) function where this return wont run on the first render, but subsequent render and unmount state,\r\n      // it will be running first and the other code above\r\n      return () => {\r\n        // This function will ensure the code above the return statement only runs omce, suitable for running HTTP request code based on keystroke\r\n        console.log(\"Cleanup\");\r\n          // Resetting the timer of the identifier variable on every keystroke.\r\n        clearTimeout(identifier);\r\n      };\r\n    }, [emailIsValid, passwordIsValid]);\r\n  */\n\n  // State management useReducers\n  const [emailState, dispatchEmail] = useReducer(formReducer, {\n    emailValue: \"\",\n    isValid: false\n  });\n  const [passwordState, dispatchPassword] = useReducer(formReducer, {\n    passwordValue: \"\",\n    isValid: false\n  });\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: \"EMAIL_INPUT\",\n      mode: \"email\",\n      val: event.target.value\n    });\n  };\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: \"PASSWORD_INPUT\",\n      mode: \"password\",\n      val: event.target.value\n    });\n  };\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"EMAIL_BLUR\"\n    });\n  };\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: \"PASSWORD_BLUR\"\n    });\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.emailValue, passwordState.passwordValue);\n  };\n  const clearFormHandler = () => {\n    dispatchEmail({\n      val: \"\"\n    });\n    dispatchPassword({\n      val: \"\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${!emailState.isValid ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.emailValue,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), emailState.emailValue, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${!passwordState.isValid ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.passwordValue,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !(passwordState.isValid && emailState.isValid),\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n          type: \"reset\",\n          className: classes.btn,\n          onClick: clearFormHandler,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n          type: \"link\",\n          className: classes.btn,\n          href: \"\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"MT1eXxCJbfw7XhlHH0mzNqjuM5I=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useReducer","Card","classes","Button","emailValidator","formReducer","state","action","newState","mode","type","emailValue","val","isValid","test","passwordValue","trim","length","Login","props","emailState","dispatchEmail","passwordState","dispatchPassword","emailChangeHandler","event","target","value","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","clearFormHandler","login","control","invalid","actions","btn"],"sources":["C:/Users/User/Documents/GitHub/React-Lessons-Section10-Using-useEffect-useReducer-and-useContext/src/components/Login/Login.js"],"sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nimport Card from \"../UI/Card/Card\";\r\nimport classes from \"./Login.module.css\";\r\nimport Button from \"../UI/Button/Button\";\r\n\r\n// State management helper function\r\nconst emailValidator = /^\\S+@\\S+\\.\\S+$/gi; // email validator regex\r\n\r\nconst formReducer = (state, action) => {\r\n  let newState;\r\n  if (action.mode === \"email\") {\r\n    if (action.type === \"EMAIL_INPUT\") {\r\n      return (newState = {\r\n        ...newState,\r\n        emailValue: action.val,\r\n        isValid: emailValidator.test(action.val),\r\n      });\r\n    }\r\n\r\n    if (action.type === \"EMAIL_BLUR\") {\r\n      return (newState = {\r\n        ...newState,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (action.mode === \"password\" && emailValidator.test(action.val)) {\r\n    if (action.type === \"PASSWORD_INPUT\") {\r\n      return (newState = {\r\n        ...newState,\r\n        passwordValue: action.val.trim(),\r\n        isValid: action.val.trim().length > 6,\r\n      });\r\n    }\r\n\r\n    if (action.type === \"PASSWORD_BLUR\") {\r\n      return (newState = {\r\n        ...newState,\r\n      });\r\n    }\r\n  }\r\n\r\n  return (newState = {\r\n    isValid: true,\r\n  });\r\n};\r\n\r\nconst Login = (props) => {\r\n  /*\r\n    // \r\n      Using Destructuring to pulling out isValid properties from emailState and passwordState object and storing them into emailIsValid and passIsValid constants \r\n      using alias assignment, and use it as dependencies and values to useEffect below to ensure it dont fires futher if form is already valid\r\n    //\r\n    const { isValid: emailIsValid } = emailState;\r\n    const { isValid: passwordIsValid } = passwordState;\r\n    useEffect(() => {\r\n      const identifier = setTimeout(() => {\r\n        console.log(\"Checking input valididity...\");\r\n        setFormIsValid(emailIsValid && passwordIsValid);\r\n      }, 500);\r\n\r\n      // This is called as Clean Up (Debouncing method) function where this return wont run on the first render, but subsequent render and unmount state,\r\n      // it will be running first and the other code above\r\n      return () => {\r\n        // This function will ensure the code above the return statement only runs omce, suitable for running HTTP request code based on keystroke\r\n        console.log(\"Cleanup\");\r\n\r\n        // Resetting the timer of the identifier variable on every keystroke.\r\n        clearTimeout(identifier);\r\n      };\r\n    }, [emailIsValid, passwordIsValid]);\r\n  */\r\n\r\n  // State management useReducers\r\n  const [emailState, dispatchEmail] = useReducer(formReducer, {\r\n    emailValue: \"\",\r\n    isValid: false,\r\n  });\r\n\r\n  const [passwordState, dispatchPassword] = useReducer(formReducer, {\r\n    passwordValue: \"\",\r\n    isValid: false,\r\n  });\r\n\r\n  const emailChangeHandler = (event) => {\r\n    dispatchEmail({\r\n      type: \"EMAIL_INPUT\",\r\n      mode: \"email\",\r\n      val: event.target.value,\r\n    });\r\n  };\r\n\r\n  const passwordChangeHandler = (event) => {\r\n    dispatchPassword({\r\n      type: \"PASSWORD_INPUT\",\r\n      mode: \"password\",\r\n      val: event.target.value,\r\n    });\r\n  };\r\n\r\n  const validateEmailHandler = () => {\r\n    dispatchEmail({\r\n      type: \"EMAIL_BLUR\",\r\n    });\r\n  };\r\n\r\n  const validatePasswordHandler = () => {\r\n    dispatchPassword({\r\n      type: \"PASSWORD_BLUR\",\r\n    });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onLogin(emailState.emailValue, passwordState.passwordValue);\r\n  };\r\n\r\n  const clearFormHandler = () => {\r\n    dispatchEmail({\r\n      val: \"\",\r\n    });\r\n\r\n    dispatchPassword({\r\n      val: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.login}>\r\n      <form onSubmit={submitHandler}>\r\n        <div\r\n          className={`${classes.control} ${\r\n            !emailState.isValid ? classes.invalid : \"\"\r\n          }`}\r\n        >\r\n          <label htmlFor=\"email\">E-Mail</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            value={emailState.emailValue}\r\n            onChange={emailChangeHandler}\r\n            onBlur={validateEmailHandler}\r\n          />\r\n        </div>\r\n        {emailState.emailValue}\r\n        <div\r\n          className={`${classes.control} ${\r\n            !passwordState.isValid ? classes.invalid : \"\"\r\n          }`}\r\n        >\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={passwordState.passwordValue}\r\n            onChange={passwordChangeHandler}\r\n            onBlur={validatePasswordHandler}\r\n          />\r\n        </div>\r\n        <div className={classes.actions}>\r\n          <Button\r\n            type=\"submit\"\r\n            className={classes.btn}\r\n            disabled={!(passwordState.isValid && emailState.isValid)}\r\n          >\r\n            Login\r\n          </Button>\r\n          &nbsp;\r\n          <Button\r\n            type=\"reset\"\r\n            className={classes.btn}\r\n            onClick={clearFormHandler}\r\n          >\r\n            Reset\r\n          </Button>\r\n          &nbsp;\r\n          <Button type=\"link\" className={classes.btn} href=\"\">\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;;AAExC;AAAA;AACA,MAAMC,cAAc,GAAG,kBAAkB,CAAC,CAAC;;AAE3C,MAAMC,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAIC,QAAQ;EACZ,IAAID,MAAM,CAACE,IAAI,KAAK,OAAO,EAAE;IAC3B,IAAIF,MAAM,CAACG,IAAI,KAAK,aAAa,EAAE;MACjC,OAAQF,QAAQ,GAAG;QACjB,GAAGA,QAAQ;QACXG,UAAU,EAAEJ,MAAM,CAACK,GAAG;QACtBC,OAAO,EAAET,cAAc,CAACU,IAAI,CAACP,MAAM,CAACK,GAAG;MACzC,CAAC;IACH;IAEA,IAAIL,MAAM,CAACG,IAAI,KAAK,YAAY,EAAE;MAChC,OAAQF,QAAQ,GAAG;QACjB,GAAGA;MACL,CAAC;IACH;EACF;EAEA,IAAID,MAAM,CAACE,IAAI,KAAK,UAAU,IAAIL,cAAc,CAACU,IAAI,CAACP,MAAM,CAACK,GAAG,CAAC,EAAE;IACjE,IAAIL,MAAM,CAACG,IAAI,KAAK,gBAAgB,EAAE;MACpC,OAAQF,QAAQ,GAAG;QACjB,GAAGA,QAAQ;QACXO,aAAa,EAAER,MAAM,CAACK,GAAG,CAACI,IAAI,EAAE;QAChCH,OAAO,EAAEN,MAAM,CAACK,GAAG,CAACI,IAAI,EAAE,CAACC,MAAM,GAAG;MACtC,CAAC;IACH;IAEA,IAAIV,MAAM,CAACG,IAAI,KAAK,eAAe,EAAE;MACnC,OAAQF,QAAQ,GAAG;QACjB,GAAGA;MACL,CAAC;IACH;EACF;EAEA,OAAQA,QAAQ,GAAG;IACjBK,OAAO,EAAE;EACX,CAAC;AACH,CAAC;AAED,MAAMK,KAAK,GAAIC,KAAK,IAAK;EAAA;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAIE;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGrB,UAAU,CAACK,WAAW,EAAE;IAC1DM,UAAU,EAAE,EAAE;IACdE,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,UAAU,CAACK,WAAW,EAAE;IAChEU,aAAa,EAAE,EAAE;IACjBF,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMW,kBAAkB,GAAIC,KAAK,IAAK;IACpCJ,aAAa,CAAC;MACZX,IAAI,EAAE,aAAa;MACnBD,IAAI,EAAE,OAAO;MACbG,GAAG,EAAEa,KAAK,CAACC,MAAM,CAACC;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,qBAAqB,GAAIH,KAAK,IAAK;IACvCF,gBAAgB,CAAC;MACfb,IAAI,EAAE,gBAAgB;MACtBD,IAAI,EAAE,UAAU;MAChBG,GAAG,EAAEa,KAAK,CAACC,MAAM,CAACC;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,oBAAoB,GAAG,MAAM;IACjCR,aAAa,CAAC;MACZX,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMoB,uBAAuB,GAAG,MAAM;IACpCP,gBAAgB,CAAC;MACfb,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMqB,aAAa,GAAIN,KAAK,IAAK;IAC/BA,KAAK,CAACO,cAAc,EAAE;IACtBb,KAAK,CAACc,OAAO,CAACb,UAAU,CAACT,UAAU,EAAEW,aAAa,CAACP,aAAa,CAAC;EACnE,CAAC;EAED,MAAMmB,gBAAgB,GAAG,MAAM;IAC7Bb,aAAa,CAAC;MACZT,GAAG,EAAE;IACP,CAAC,CAAC;IAEFW,gBAAgB,CAAC;MACfX,GAAG,EAAE;IACP,CAAC,CAAC;EACJ,CAAC;EAED,oBACE,QAAC,IAAI;IAAC,SAAS,EAAEV,OAAO,CAACiC,KAAM;IAAA,uBAC7B;MAAM,QAAQ,EAAEJ,aAAc;MAAA,wBAC5B;QACE,SAAS,EAAG,GAAE7B,OAAO,CAACkC,OAAQ,IAC5B,CAAChB,UAAU,CAACP,OAAO,GAAGX,OAAO,CAACmC,OAAO,GAAG,EACzC,EAAE;QAAA,wBAEH;UAAO,OAAO,EAAC,OAAO;UAAA,UAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAQ,eACrC;UACE,IAAI,EAAC,OAAO;UACZ,EAAE,EAAC,OAAO;UACV,KAAK,EAAEjB,UAAU,CAACT,UAAW;UAC7B,QAAQ,EAAEa,kBAAmB;UAC7B,MAAM,EAAEK;QAAqB;UAAA;UAAA;UAAA;QAAA,QAC7B;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,EACLT,UAAU,CAACT,UAAU,eACtB;QACE,SAAS,EAAG,GAAET,OAAO,CAACkC,OAAQ,IAC5B,CAACd,aAAa,CAACT,OAAO,GAAGX,OAAO,CAACmC,OAAO,GAAG,EAC5C,EAAE;QAAA,wBAEH;UAAO,OAAO,EAAC,UAAU;UAAA,UAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAQ,eAC1C;UACE,IAAI,EAAC,UAAU;UACf,EAAE,EAAC,UAAU;UACb,KAAK,EAAEf,aAAa,CAACP,aAAc;UACnC,QAAQ,EAAEa,qBAAsB;UAChC,MAAM,EAAEE;QAAwB;UAAA;UAAA;UAAA;QAAA,QAChC;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QAAK,SAAS,EAAE5B,OAAO,CAACoC,OAAQ;QAAA,wBAC9B,QAAC,MAAM;UACL,IAAI,EAAC,QAAQ;UACb,SAAS,EAAEpC,OAAO,CAACqC,GAAI;UACvB,QAAQ,EAAE,EAAEjB,aAAa,CAACT,OAAO,IAAIO,UAAU,CAACP,OAAO,CAAE;UAAA,UAC1D;QAED;UAAA;UAAA;UAAA;QAAA,QAAS,QAET,uBAAC,MAAM;UACL,IAAI,EAAC,OAAO;UACZ,SAAS,EAAEX,OAAO,CAACqC,GAAI;UACvB,OAAO,EAAEL,gBAAiB;UAAA,UAC3B;QAED;UAAA;UAAA;UAAA;QAAA,QAAS,QAET,uBAAC,MAAM;UAAC,IAAI,EAAC,MAAM;UAAC,SAAS,EAAEhC,OAAO,CAACqC,GAAI;UAAC,IAAI,EAAC,EAAE;UAAA,UAAC;QAEpD;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QACL;IAAA;MAAA;MAAA;MAAA;IAAA;EACD;IAAA;IAAA;IAAA;EAAA,QACF;AAEX,CAAC;AAAC,GAxIIrB,KAAK;AAAA,KAALA,KAAK;AA0IX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}