{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raj\\\\Desktop\\\\react_lectures\\\\Section 10\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// Initializing component or app wide initial state and store inside a variable of any name based on state context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  // for function based init state values just add an empty arrow anonymous function for better IDE auto-completion\n  onLogin: () => {} // same as above\n});\n\n// Instead of applying values inside App.js using AuthContext.Provider component, we can declare here under Context Management method to create the component here\n// and pass props via App.js's AuthContext component to here\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    if (localStorage.getItem(\"login\") === \"yes\") {\n      setIsLoggedIn(true);\n      setUserName(localStorage.getItem(\"userName\"));\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"login\", \"yes\");\n    localStorage.setItem(\"userName\", email);\n    setUserName(email);\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem(\"login\");\n    localStorage.removeItem(\"userName\");\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: props.isLoggedIn,\n      onLogout: props.logoutHandler,\n      onLogin: props.loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","AuthContext","createContext","isLoggedIn","onLogout","onLogin","AuthContextProvider","props","setIsLoggedIn","localStorage","getItem","setUserName","loginHandler","email","password","setItem","logoutHandler","removeItem","children"],"sources":["C:/Users/Raj/Desktop/react_lectures/Section 10/01-starting-project/src/store/auth-context.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Initializing component or app wide initial state and store inside a variable of any name based on state context\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  onLogout: () => {}, // for function based init state values just add an empty arrow anonymous function for better IDE auto-completion\r\n  onLogin: () => {}, // same as above\r\n});\r\n\r\n// Instead of applying values inside App.js using AuthContext.Provider component, we can declare here under Context Management method to create the component here\r\n// and pass props via App.js's AuthContext component to here\r\nexport const AuthContextProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"login\") === \"yes\") {\r\n      setIsLoggedIn(true);\r\n      setUserName(localStorage.getItem(\"userName\"));\r\n    }\r\n  }, []);\r\n\r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem(\"login\", \"yes\");\r\n    localStorage.setItem(\"userName\", email);\r\n    setUserName(email);\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"login\");\r\n    localStorage.removeItem(\"userName\");\r\n    setIsLoggedIn(false);\r\n  };\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn: props.isLoggedIn,\r\n        onLogout: props.logoutHandler,\r\n        onLogin: props.loginHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AAAA;AACA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,MAAM,CAAC,CAAC;EAAE;EACpBC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAE;AACrB,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EAC5C,MAAM,CAACJ,UAAU,EAAEK,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,IAAIU,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;MAC3CF,aAAa,CAAC,IAAI,CAAC;MACnBG,WAAW,CAACF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACAL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC;IACpCN,YAAY,CAACM,OAAO,CAAC,UAAU,EAAEF,KAAK,CAAC;IACvCF,WAAW,CAACE,KAAK,CAAC;IAClBL,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMQ,aAAa,GAAG,MAAM;IAC1BP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,UAAU,CAAC;IACnCT,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EACD,oBACE,QAAC,WAAW,CAAC,QAAQ;IACnB,KAAK,EAAE;MACLL,UAAU,EAAEI,KAAK,CAACJ,UAAU;MAC5BC,QAAQ,EAAEG,KAAK,CAACS,aAAa;MAC7BX,OAAO,EAAEE,KAAK,CAACK;IACjB,CAAE;IAAA,UAEDL,KAAK,CAACW;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GAnCWZ,mBAAmB;AAAA,KAAnBA,mBAAmB;AAqChC,eAAeL,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}