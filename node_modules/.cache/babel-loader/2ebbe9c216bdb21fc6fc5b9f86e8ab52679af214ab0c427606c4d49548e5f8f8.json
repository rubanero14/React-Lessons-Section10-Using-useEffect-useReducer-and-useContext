{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\React-Lessons-Section10-Using-useEffect-useReducer-and-useContext\\\\src\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// Initializing component or app wide initial state and store inside a variable of any name based on state context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  // for function based init state values just add an empty arrow anonymous function for better IDE auto-completion\n  onLogin: (email, password) => {},\n  // same as above, but this time it has params as loginHandler needs params\n  userName: \"\",\n  password: \"\",\n  name: \"\"\n});\n\n// Instead of applying values inside App.js using AuthContext.Provider component, we can declare here under Context Management method to create the component here\n// and pass props via App.js's AuthContext component to here\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  useEffect(() => {\n    if (localStorage.getItem(\"login\") === \"yes\") {\n      setIsLoggedIn(true);\n      setUserName(localStorage.getItem(\"userName\"));\n      setPassword(localStorage.getItem(\"password\"));\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"login\", \"yes\");\n    localStorage.setItem(\"userName\", email);\n    localStorage.setItem(\"password\", password);\n    setUserName(email);\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    localStorage.setItem(\"login\", \"no\");\n    // localStorage.removeItem(\"login\");\n    // localStorage.removeItem(\"userName\");\n    setIsLoggedIn(false);\n  };\n  useEffect(() => {});\n  if (userName !== \"\") {\n    const formattedUserName = userName.split(\"@\")[0].replaceAll(/[^\\w|^\\d]/gi, \" \");\n    setName(formattedUserName.split(\" \").map(name => {\n      return (name[0].toUpperCase() + name.slice(1).toLowerCase() + \" \").trim().toUpperCase();\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler,\n      userName: userName,\n      password: password,\n      name: name\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"roRn9ajspY0dG0p8QFmlNNlFNFw=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","userName","name","AuthContextProvider","props","setIsLoggedIn","setUserName","setPassword","setName","localStorage","getItem","loginHandler","setItem","logoutHandler","formattedUserName","split","replaceAll","map","toUpperCase","slice","toLowerCase","trim","children"],"sources":["C:/Users/User/Documents/GitHub/React-Lessons-Section10-Using-useEffect-useReducer-and-useContext/src/store/auth-context.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Initializing component or app wide initial state and store inside a variable of any name based on state context\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  onLogout: () => {}, // for function based init state values just add an empty arrow anonymous function for better IDE auto-completion\r\n  onLogin: (email, password) => {}, // same as above, but this time it has params as loginHandler needs params\r\n  userName: \"\",\r\n  password: \"\",\r\n  name: \"\",\r\n});\r\n\r\n// Instead of applying values inside App.js using AuthContext.Provider component, we can declare here under Context Management method to create the component here\r\n// and pass props via App.js's AuthContext component to here\r\nexport const AuthContextProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"login\") === \"yes\") {\r\n      setIsLoggedIn(true);\r\n      setUserName(localStorage.getItem(\"userName\"));\r\n      setPassword(localStorage.getItem(\"password\"));\r\n    }\r\n  }, []);\r\n\r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem(\"login\", \"yes\");\r\n    localStorage.setItem(\"userName\", email);\r\n    localStorage.setItem(\"password\", password);\r\n    setUserName(email);\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.setItem(\"login\", \"no\");\r\n    // localStorage.removeItem(\"login\");\r\n    // localStorage.removeItem(\"userName\");\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    \r\n  });\r\n  if (userName !== \"\") {\r\n    const formattedUserName = userName\r\n      .split(\"@\")[0]\r\n      .replaceAll(/[^\\w|^\\d]/gi, \" \");\r\n\r\n    setName(\r\n      formattedUserName.split(\" \").map((name) => {\r\n        return (name[0].toUpperCase() + name.slice(1).toLowerCase() + \" \")\r\n          .trim()\r\n          .toUpperCase();\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn: isLoggedIn,\r\n        onLogout: logoutHandler,\r\n        onLogin: loginHandler,\r\n        userName: userName,\r\n        password: password,\r\n        name: name,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}