{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\React-Lessons-Section10-Using-useEffect-useReducer-and-useContext\\\\src\\\\components\\\\Login\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\n// State management helper function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emailValidator = /^\\S+@\\S+\\.\\S+$/gi; // email validator regex\n\nconst formReducer = (state, action) => {\n  if (action.mode === \"email\") {\n    if (action.type === \"EMAIL_INPUT\") {\n      return {\n        emailValue: action.val.trim(),\n        isValid: emailValidator.test(action.val)\n      };\n    }\n    if (action.type === \"EMAIL_BLUR\") {\n      return {\n        emailValue: state.val.trim(),\n        isValid: emailValidator.test(action.val)\n      };\n    }\n  }\n  if (action.mode === \"password\") {\n    if (action.type === \"PASSWORD_INPUT\") {\n      return {\n        passwordValue: action.val.trim(),\n        isValid: action.val.trim().length > 6\n      };\n    }\n    if (action.type === \"PASSWORD_BLUR\") {\n      return {\n        passwordValue: state.val.trim(),\n        isValid: state.val.trim().length > 6\n      };\n    }\n  }\n  return {\n    isValid: true\n  };\n};\nconst Login = props => {\n  _s();\n  /*\r\n    // Using Destructuring to pullout properties from emailState and passwordState object\r\n    const { isValid } = emailState;\r\n    const { isValid } = emailState;\r\n    useEffect(() => {\r\n      const identifier = setTimeout(() => {\r\n        console.log(\"Checking input valididity...\");\r\n        setFormIsValid(\r\n          enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6\r\n        );\r\n      }, 500);\r\n        // This is called as Clean Up (Debouncing method) function where this return wont run on the first render, but subsequent render and unmount state,\r\n      // it will be running first and the other code above\r\n      return () => {\r\n        // This function will ensure the code above the return statement only runs omce, suitable for running HTTP request code based on keystroke\r\n        console.log(\"Cleanup\");\r\n          // Resetting the timer of the identifier variable on every keystroke.\r\n        clearTimeout(identifier);\r\n      };\r\n    });\r\n  */\n  // State management useReducers\n  const [emailState, dispatchEmail] = useReducer(formReducer, {\n    emailValue: \"\",\n    isValid: false\n  });\n  const [passwordState, dispatchPassword] = useReducer(formReducer, {\n    passwordValue: \"\",\n    isValid: false\n  });\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: \"EMAIL_INPUT\",\n      mode: \"email\",\n      val: event.target.value\n    });\n  };\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: \"PASSWORD_INPUT\",\n      mode: \"password\",\n      val: event.target.value\n    });\n  };\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"EMAIL_BLUR\"\n    });\n  };\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: \"PASSWORD_BLUR\"\n    });\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.emailValue, passwordState.passwordValue);\n  };\n  const clearFormHandler = () => {\n    dispatchEmail({\n      val: \"\"\n    });\n    dispatchPassword({\n      val: \"\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${!emailState.isValid ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.emailValue,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${!passwordState.isValid ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.passwordValue,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !(passwordState.isValid && emailState.isValid),\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n          type: \"reset\",\n          className: classes.btn,\n          onClick: clearFormHandler,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"MT1eXxCJbfw7XhlHH0mzNqjuM5I=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useReducer","Card","classes","Button","emailValidator","formReducer","state","action","mode","type","emailValue","val","trim","isValid","test","passwordValue","length","Login","props","emailState","dispatchEmail","passwordState","dispatchPassword","emailChangeHandler","event","target","value","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","clearFormHandler","login","control","invalid","actions","btn"],"sources":["C:/Users/User/Documents/GitHub/React-Lessons-Section10-Using-useEffect-useReducer-and-useContext/src/components/Login/Login.js"],"sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nimport Card from \"../UI/Card/Card\";\r\nimport classes from \"./Login.module.css\";\r\nimport Button from \"../UI/Button/Button\";\r\n\r\n// State management helper function\r\nconst emailValidator = /^\\S+@\\S+\\.\\S+$/gi; // email validator regex\r\n\r\nconst formReducer = (state, action) => {\r\n  if (action.mode === \"email\") {\r\n    if (action.type === \"EMAIL_INPUT\") {\r\n      return {\r\n        emailValue: action.val.trim(),\r\n        isValid: emailValidator.test(action.val),\r\n      };\r\n    }\r\n\r\n    if (action.type === \"EMAIL_BLUR\") {\r\n      return {\r\n        emailValue: state.val.trim(),\r\n        isValid: emailValidator.test(action.val),\r\n      };\r\n    }\r\n  }\r\n\r\n  if (action.mode === \"password\") {\r\n    if (action.type === \"PASSWORD_INPUT\") {\r\n      return {\r\n        passwordValue: action.val.trim(),\r\n        isValid: action.val.trim().length > 6,\r\n      };\r\n    }\r\n\r\n    if (action.type === \"PASSWORD_BLUR\") {\r\n      return {\r\n        passwordValue: state.val.trim(),\r\n        isValid: state.val.trim().length > 6,\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n  };\r\n};\r\n\r\nconst Login = (props) => {\r\n  /*\r\n    // Using Destructuring to pullout properties from emailState and passwordState object\r\n    const { isValid } = emailState;\r\n    const { isValid } = emailState;\r\n    useEffect(() => {\r\n      const identifier = setTimeout(() => {\r\n        console.log(\"Checking input valididity...\");\r\n        setFormIsValid(\r\n          enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6\r\n        );\r\n      }, 500);\r\n\r\n      // This is called as Clean Up (Debouncing method) function where this return wont run on the first render, but subsequent render and unmount state,\r\n      // it will be running first and the other code above\r\n      return () => {\r\n        // This function will ensure the code above the return statement only runs omce, suitable for running HTTP request code based on keystroke\r\n        console.log(\"Cleanup\");\r\n\r\n        // Resetting the timer of the identifier variable on every keystroke.\r\n        clearTimeout(identifier);\r\n      };\r\n    });\r\n  */\r\n  // State management useReducers\r\n  const [emailState, dispatchEmail] = useReducer(formReducer, {\r\n    emailValue: \"\",\r\n    isValid: false,\r\n  });\r\n\r\n  const [passwordState, dispatchPassword] = useReducer(formReducer, {\r\n    passwordValue: \"\",\r\n    isValid: false,\r\n  });\r\n\r\n  const emailChangeHandler = (event) => {\r\n    dispatchEmail({\r\n      type: \"EMAIL_INPUT\",\r\n      mode: \"email\",\r\n      val: event.target.value,\r\n    });\r\n  };\r\n\r\n  const passwordChangeHandler = (event) => {\r\n    dispatchPassword({\r\n      type: \"PASSWORD_INPUT\",\r\n      mode: \"password\",\r\n      val: event.target.value,\r\n    });\r\n  };\r\n\r\n  const validateEmailHandler = () => {\r\n    dispatchEmail({\r\n      type: \"EMAIL_BLUR\",\r\n    });\r\n  };\r\n\r\n  const validatePasswordHandler = () => {\r\n    dispatchPassword({\r\n      type: \"PASSWORD_BLUR\",\r\n    });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onLogin(emailState.emailValue, passwordState.passwordValue);\r\n  };\r\n\r\n  const clearFormHandler = () => {\r\n    dispatchEmail({\r\n      val: \"\",\r\n    });\r\n\r\n    dispatchPassword({\r\n      val: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.login}>\r\n      <form onSubmit={submitHandler}>\r\n        <div\r\n          className={`${classes.control} ${\r\n            !emailState.isValid ? classes.invalid : \"\"\r\n          }`}\r\n        >\r\n          <label htmlFor=\"email\">E-Mail</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            value={emailState.emailValue}\r\n            onChange={emailChangeHandler}\r\n            onBlur={validateEmailHandler}\r\n          />\r\n        </div>\r\n        <div\r\n          className={`${classes.control} ${\r\n            !passwordState.isValid ? classes.invalid : \"\"\r\n          }`}\r\n        >\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={passwordState.passwordValue}\r\n            onChange={passwordChangeHandler}\r\n            onBlur={validatePasswordHandler}\r\n          />\r\n        </div>\r\n        <div className={classes.actions}>\r\n          <Button\r\n            type=\"submit\"\r\n            className={classes.btn}\r\n            disabled={!(passwordState.isValid && emailState.isValid)}\r\n          >\r\n            Login\r\n          </Button>\r\n          &nbsp;\r\n          <Button\r\n            type=\"reset\"\r\n            className={classes.btn}\r\n            onClick={clearFormHandler}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}