{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raj\\\\Desktop\\\\react_lectures\\\\Section 10\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\";\nimport React from \"react\";\n\n// Initializing component or app wide initial state and store inside a variable of any name based on state context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {} // for function based init state values just add an empty arrow anonymous function for better IDE auto-completion\n});\n\n// Instead of applying values inside App.js using AuthContext.Provider component, we can declare here under Context Management method to create the component here\n// and pass props via App.js's AuthContext component to here\nexport const AuthContextProvider = props => {\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: props.isLoggedIn,\n      onLogout: props.logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","props","logoutHandler","children"],"sources":["C:/Users/Raj/Desktop/react_lectures/Section 10/01-starting-project/src/store/auth-context.js"],"sourcesContent":["import React from \"react\";\r\n\r\n// Initializing component or app wide initial state and store inside a variable of any name based on state context\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  onLogout: () => {}, // for function based init state values just add an empty arrow anonymous function for better IDE auto-completion\r\n});\r\n\r\n// Instead of applying values inside App.js using AuthContext.Provider component, we can declare here under Context Management method to create the component here\r\n// and pass props via App.js's AuthContext component to here\r\nexport const AuthContextProvider = (props) => {\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn: props.isLoggedIn,\r\n        onLogout: props.logoutHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\nexport default AuthContext;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA;AACA,MAAMC,WAAW,gBAAGD,KAAK,CAACE,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAE;AACtB,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAC5C,oBACE,QAAC,WAAW,CAAC,QAAQ;IACnB,KAAK,EAAE;MACLH,UAAU,EAAEG,KAAK,CAACH,UAAU;MAC5BC,QAAQ,EAAEE,KAAK,CAACC;IAClB,CAAE;IAAA,UAEDD,KAAK,CAACE;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,KAXWH,mBAAmB;AAYhC,eAAeJ,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}